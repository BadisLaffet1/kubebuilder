diff --git a/testdata/project-v4-with-plugins/api/v1alpha1/busybox_types.go b/testdata/project-v4-with-plugins/api/v1alpha1/busybox_types.go
index e4ce67d37..df8b86128 100644
--- a/testdata/project-v4-with-plugins/api/v1alpha1/busybox_types.go
+++ b/testdata/project-v4-with-plugins/api/v1alpha1/busybox_types.go
@@ -28,13 +28,11 @@ type BusyboxSpec struct {
 	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
 	// Important: Run "make" to regenerate code after modifying this file
 
-	// Size defines the number of Busybox instances
-	// The following markers will use OpenAPI v3 schema to validate the value
-	// More info: https://book.kubebuilder.io/reference/markers/crd-validation.html
-	// +kubebuilder:validation:Minimum=1
-	// +kubebuilder:validation:Maximum=3
-	// +kubebuilder:validation:ExclusiveMaximum=false
-	Size int32 `json:"size,omitempty"`
+	// size defines the number of Busybox instances
+	// +kubebuilder:default=1
+	// +kubebuilder:validation:Minimum=0
+	// +optional
+	Size *int32 `json:"size,,omitempty"`
 }
 
 // BusyboxStatus defines the observed state of Busybox
@@ -61,11 +59,19 @@ type BusyboxStatus struct {
 
 // Busybox is the Schema for the busyboxes API
 type Busybox struct {
-	metav1.TypeMeta   `json:",inline"`
+	metav1.TypeMeta `json:",inline"`
+
+	// metadata is a standard object metadata.
+	// +optional
 	metav1.ObjectMeta `json:"metadata,omitempty"`
 
-	Spec   BusyboxSpec   `json:"spec,omitempty"`
-	Status BusyboxStatus `json:"status,omitempty"`
+	// spec defines the desired state of Busybox.
+	// +required
+	Spec BusyboxSpec `json:"spec"`
+
+	// status defines the observed state of Busybox.
+	// +optional
+	Status *BusyboxStatus `json:"status,omitempty"`
 }
 
 // +kubebuilder:object:root=true
diff --git a/testdata/project-v4-with-plugins/api/v1alpha1/memcached_types.go b/testdata/project-v4-with-plugins/api/v1alpha1/memcached_types.go
index 4930650b7..69bfe47c5 100644
--- a/testdata/project-v4-with-plugins/api/v1alpha1/memcached_types.go
+++ b/testdata/project-v4-with-plugins/api/v1alpha1/memcached_types.go
@@ -28,16 +28,15 @@ type MemcachedSpec struct {
 	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
 	// Important: Run "make" to regenerate code after modifying this file
 
-	// Size defines the number of Memcached instances
-	// The following markers will use OpenAPI v3 schema to validate the value
-	// More info: https://book.kubebuilder.io/reference/markers/crd-validation.html
-	// +kubebuilder:validation:Minimum=1
-	// +kubebuilder:validation:Maximum=3
-	// +kubebuilder:validation:ExclusiveMaximum=false
-	Size int32 `json:"size,omitempty"`
-
-	// Port defines the port that will be used to init the container with the image
-	ContainerPort int32 `json:"containerPort,omitempty"`
+	// size defines the number of Memcached instances
+	// +kubebuilder:default=1
+	// +kubebuilder:validation:Minimum=0
+	// +optional
+	Size *int32 `json:"size,,omitempty"`
+
+	// containerPort defines the port that will be used to init the container with the image
+	// +required
+	ContainerPort int32 `json:"containerPort"`
 }
 
 // MemcachedStatus defines the observed state of Memcached
@@ -64,11 +63,19 @@ type MemcachedStatus struct {
 
 // Memcached is the Schema for the memcacheds API
 type Memcached struct {
-	metav1.TypeMeta   `json:",inline"`
+	metav1.TypeMeta `json:",inline"`
+
+	// metadata is a standard object metadata.
+	// +optional
 	metav1.ObjectMeta `json:"metadata,omitempty"`
 
-	Spec   MemcachedSpec   `json:"spec,omitempty"`
-	Status MemcachedStatus `json:"status,omitempty"`
+	// spec defines the desired state of Memcached.
+	// +required
+	Spec MemcachedSpec `json:"spec"`
+
+	// status defines the observed state of Memcached.
+	// +optional
+	Status *MemcachedStatus `json:"status,omitempty"`
 }
 
 // +kubebuilder:object:root=true
diff --git a/testdata/project-v4-with-plugins/api/v1alpha1/zz_generated.deepcopy.go b/testdata/project-v4-with-plugins/api/v1alpha1/zz_generated.deepcopy.go
index 340cb1ad6..6c5336a7f 100644
--- a/testdata/project-v4-with-plugins/api/v1alpha1/zz_generated.deepcopy.go
+++ b/testdata/project-v4-with-plugins/api/v1alpha1/zz_generated.deepcopy.go
@@ -30,8 +30,12 @@ func (in *Busybox) DeepCopyInto(out *Busybox) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
 	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
-	out.Spec = in.Spec
-	in.Status.DeepCopyInto(&out.Status)
+	in.Spec.DeepCopyInto(&out.Spec)
+	if in.Status != nil {
+		in, out := &in.Status, &out.Status
+		*out = new(BusyboxStatus)
+		(*in).DeepCopyInto(*out)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Busybox.
@@ -87,6 +91,11 @@ func (in *BusyboxList) DeepCopyObject() runtime.Object {
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *BusyboxSpec) DeepCopyInto(out *BusyboxSpec) {
 	*out = *in
+	if in.Size != nil {
+		in, out := &in.Size, &out.Size
+		*out = new(int32)
+		**out = **in
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BusyboxSpec.
@@ -126,8 +135,12 @@ func (in *Memcached) DeepCopyInto(out *Memcached) {
 	*out = *in
 	out.TypeMeta = in.TypeMeta
 	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
-	out.Spec = in.Spec
-	in.Status.DeepCopyInto(&out.Status)
+	in.Spec.DeepCopyInto(&out.Spec)
+	if in.Status != nil {
+		in, out := &in.Status, &out.Status
+		*out = new(MemcachedStatus)
+		(*in).DeepCopyInto(*out)
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Memcached.
@@ -183,6 +196,11 @@ func (in *MemcachedList) DeepCopyObject() runtime.Object {
 // DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
 func (in *MemcachedSpec) DeepCopyInto(out *MemcachedSpec) {
 	*out = *in
+	if in.Size != nil {
+		in, out := &in.Size, &out.Size
+		*out = new(int32)
+		**out = **in
+	}
 }
 
 // DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MemcachedSpec.
diff --git a/testdata/project-v4-with-plugins/config/crd/bases/example.com.testproject.org_busyboxes.yaml b/testdata/project-v4-with-plugins/config/crd/bases/example.com.testproject.org_busyboxes.yaml
index 919f338d5..fe4d31091 100644
--- a/testdata/project-v4-with-plugins/config/crd/bases/example.com.testproject.org_busyboxes.yaml
+++ b/testdata/project-v4-with-plugins/config/crd/bases/example.com.testproject.org_busyboxes.yaml
@@ -37,20 +37,17 @@ spec:
           metadata:
             type: object
           spec:
-            description: BusyboxSpec defines the desired state of Busybox
+            description: spec defines the desired state of Busybox.
             properties:
               size:
-                description: |-
-                  Size defines the number of Busybox instances
-                  The following markers will use OpenAPI v3 schema to validate the value
-                  More info: https://book.kubebuilder.io/reference/markers/crd-validation.html
+                default: 1
+                description: size defines the number of Busybox instances
                 format: int32
-                maximum: 3
-                minimum: 1
+                minimum: 0
                 type: integer
             type: object
           status:
-            description: BusyboxStatus defines the observed state of Busybox
+            description: status defines the observed state of Busybox.
             properties:
               conditions:
                 description: |-
@@ -122,6 +119,8 @@ spec:
                 - type
                 x-kubernetes-list-type: map
             type: object
+        required:
+        - spec
         type: object
     served: true
     storage: true
diff --git a/testdata/project-v4-with-plugins/config/crd/bases/example.com.testproject.org_memcacheds.yaml b/testdata/project-v4-with-plugins/config/crd/bases/example.com.testproject.org_memcacheds.yaml
index ca7fc7c06..b5310b2bf 100644
--- a/testdata/project-v4-with-plugins/config/crd/bases/example.com.testproject.org_memcacheds.yaml
+++ b/testdata/project-v4-with-plugins/config/crd/bases/example.com.testproject.org_memcacheds.yaml
@@ -37,25 +37,24 @@ spec:
           metadata:
             type: object
           spec:
-            description: MemcachedSpec defines the desired state of Memcached
+            description: spec defines the desired state of Memcached.
             properties:
               containerPort:
-                description: Port defines the port that will be used to init the container
-                  with the image
+                description: containerPort defines the port that will be used to init
+                  the container with the image
                 format: int32
                 type: integer
               size:
-                description: |-
-                  Size defines the number of Memcached instances
-                  The following markers will use OpenAPI v3 schema to validate the value
-                  More info: https://book.kubebuilder.io/reference/markers/crd-validation.html
+                default: 1
+                description: size defines the number of Memcached instances
                 format: int32
-                maximum: 3
-                minimum: 1
+                minimum: 0
                 type: integer
+            required:
+            - containerPort
             type: object
           status:
-            description: MemcachedStatus defines the observed state of Memcached
+            description: status defines the observed state of Memcached.
             properties:
               conditions:
                 description: |-
@@ -127,6 +126,8 @@ spec:
                 - type
                 x-kubernetes-list-type: map
             type: object
+        required:
+        - spec
         type: object
     served: true
     storage: true
diff --git a/testdata/project-v4-with-plugins/dist/chart/templates/crd/example.com.testproject.org_busyboxes.yaml b/testdata/project-v4-with-plugins/dist/chart/templates/crd/example.com.testproject.org_busyboxes.yaml
index cb373405e..82f50c344 100644
--- a/testdata/project-v4-with-plugins/dist/chart/templates/crd/example.com.testproject.org_busyboxes.yaml
+++ b/testdata/project-v4-with-plugins/dist/chart/templates/crd/example.com.testproject.org_busyboxes.yaml
@@ -43,20 +43,17 @@ spec:
           metadata:
             type: object
           spec:
-            description: BusyboxSpec defines the desired state of Busybox
+            description: spec defines the desired state of Busybox.
             properties:
               size:
-                description: |-
-                  Size defines the number of Busybox instances
-                  The following markers will use OpenAPI v3 schema to validate the value
-                  More info: https://book.kubebuilder.io/reference/markers/crd-validation.html
+                default: 1
+                description: size defines the number of Busybox instances
                 format: int32
-                maximum: 3
-                minimum: 1
+                minimum: 0
                 type: integer
             type: object
           status:
-            description: BusyboxStatus defines the observed state of Busybox
+            description: status defines the observed state of Busybox.
             properties:
               conditions:
                 description: |-
@@ -128,6 +125,8 @@ spec:
                 - type
                 x-kubernetes-list-type: map
             type: object
+        required:
+        - spec
         type: object
     served: true
     storage: true
diff --git a/testdata/project-v4-with-plugins/dist/chart/templates/crd/example.com.testproject.org_memcacheds.yaml b/testdata/project-v4-with-plugins/dist/chart/templates/crd/example.com.testproject.org_memcacheds.yaml
index c9e949936..9ca23b40c 100644
--- a/testdata/project-v4-with-plugins/dist/chart/templates/crd/example.com.testproject.org_memcacheds.yaml
+++ b/testdata/project-v4-with-plugins/dist/chart/templates/crd/example.com.testproject.org_memcacheds.yaml
@@ -43,25 +43,24 @@ spec:
           metadata:
             type: object
           spec:
-            description: MemcachedSpec defines the desired state of Memcached
+            description: spec defines the desired state of Memcached.
             properties:
               containerPort:
-                description: Port defines the port that will be used to init the container
-                  with the image
+                description: containerPort defines the port that will be used to init
+                  the container with the image
                 format: int32
                 type: integer
               size:
-                description: |-
-                  Size defines the number of Memcached instances
-                  The following markers will use OpenAPI v3 schema to validate the value
-                  More info: https://book.kubebuilder.io/reference/markers/crd-validation.html
+                default: 1
+                description: size defines the number of Memcached instances
                 format: int32
-                maximum: 3
-                minimum: 1
+                minimum: 0
                 type: integer
+            required:
+            - containerPort
             type: object
           status:
-            description: MemcachedStatus defines the observed state of Memcached
+            description: status defines the observed state of Memcached.
             properties:
               conditions:
                 description: |-
@@ -133,6 +132,8 @@ spec:
                 - type
                 x-kubernetes-list-type: map
             type: object
+        required:
+        - spec
         type: object
     served: true
     storage: true
diff --git a/testdata/project-v4-with-plugins/dist/install.yaml b/testdata/project-v4-with-plugins/dist/install.yaml
index c2e0d8f4d..1c86bd022 100644
--- a/testdata/project-v4-with-plugins/dist/install.yaml
+++ b/testdata/project-v4-with-plugins/dist/install.yaml
@@ -45,20 +45,17 @@ spec:
           metadata:
             type: object
           spec:
-            description: BusyboxSpec defines the desired state of Busybox
+            description: spec defines the desired state of Busybox.
             properties:
               size:
-                description: |-
-                  Size defines the number of Busybox instances
-                  The following markers will use OpenAPI v3 schema to validate the value
-                  More info: https://book.kubebuilder.io/reference/markers/crd-validation.html
+                default: 1
+                description: size defines the number of Busybox instances
                 format: int32
-                maximum: 3
-                minimum: 1
+                minimum: 0
                 type: integer
             type: object
           status:
-            description: BusyboxStatus defines the observed state of Busybox
+            description: status defines the observed state of Busybox.
             properties:
               conditions:
                 description: |-
@@ -130,6 +127,8 @@ spec:
                 - type
                 x-kubernetes-list-type: map
             type: object
+        required:
+        - spec
         type: object
     served: true
     storage: true
@@ -174,25 +173,24 @@ spec:
           metadata:
             type: object
           spec:
-            description: MemcachedSpec defines the desired state of Memcached
+            description: spec defines the desired state of Memcached.
             properties:
               containerPort:
-                description: Port defines the port that will be used to init the container
-                  with the image
+                description: containerPort defines the port that will be used to init
+                  the container with the image
                 format: int32
                 type: integer
               size:
-                description: |-
-                  Size defines the number of Memcached instances
-                  The following markers will use OpenAPI v3 schema to validate the value
-                  More info: https://book.kubebuilder.io/reference/markers/crd-validation.html
+                default: 1
+                description: size defines the number of Memcached instances
                 format: int32
-                maximum: 3
-                minimum: 1
+                minimum: 0
                 type: integer
+            required:
+            - containerPort
             type: object
           status:
-            description: MemcachedStatus defines the observed state of Memcached
+            description: status defines the observed state of Memcached.
             properties:
               conditions:
                 description: |-
@@ -264,6 +262,8 @@ spec:
                 - type
                 x-kubernetes-list-type: map
             type: object
+        required:
+        - spec
         type: object
     served: true
     storage: true
diff --git a/testdata/project-v4-with-plugins/internal/controller/busybox_controller.go b/testdata/project-v4-with-plugins/internal/controller/busybox_controller.go
index f7f3729eb..2140c2b8a 100644
--- a/testdata/project-v4-with-plugins/internal/controller/busybox_controller.go
+++ b/testdata/project-v4-with-plugins/internal/controller/busybox_controller.go
@@ -100,6 +100,10 @@ func (r *BusyboxReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ct
 	}
 
 	// Let's just set the status as Unknown when no status is available
+	if busybox.Status == nil {
+		busybox.Status = &examplecomv1alpha1.BusyboxStatus{}
+	}
+
 	if len(busybox.Status.Conditions) == 0 {
 		meta.SetStatusCondition(&busybox.Status.Conditions, metav1.Condition{Type: typeAvailableBusybox, Status: metav1.ConditionUnknown, Reason: "Reconciling", Message: "Starting reconciliation"})
 		if err = r.Status().Update(ctx, busybox); err != nil {
@@ -233,8 +237,8 @@ func (r *BusyboxReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ct
 	// Therefore, the following code will ensure the Deployment size is the same as defined
 	// via the Size spec of the Custom Resource which we are reconciling.
 	size := busybox.Spec.Size
-	if *found.Spec.Replicas != size {
-		found.Spec.Replicas = &size
+	if found.Spec.Replicas == nil || found.Spec.Replicas != size {
+		found.Spec.Replicas = size
 		if err = r.Update(ctx, found); err != nil {
 			log.Error(err, "Failed to update Deployment",
 				"Deployment.Namespace", found.Namespace, "Deployment.Name", found.Name)
@@ -318,7 +322,7 @@ func (r *BusyboxReconciler) deploymentForBusybox(
 			Namespace: busybox.Namespace,
 		},
 		Spec: appsv1.DeploymentSpec{
-			Replicas: &replicas,
+			Replicas: replicas,
 			Selector: &metav1.LabelSelector{
 				MatchLabels: ls,
 			},
diff --git a/testdata/project-v4-with-plugins/internal/controller/busybox_controller_test.go b/testdata/project-v4-with-plugins/internal/controller/busybox_controller_test.go
index b214a0624..7c3417e9b 100644
--- a/testdata/project-v4-with-plugins/internal/controller/busybox_controller_test.go
+++ b/testdata/project-v4-with-plugins/internal/controller/busybox_controller_test.go
@@ -29,6 +29,7 @@ import (
 	"k8s.io/apimachinery/pkg/api/errors"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/types"
+	"k8s.io/utils/ptr"
 	"sigs.k8s.io/controller-runtime/pkg/reconcile"
 
 	examplecomv1alpha1 "sigs.k8s.io/kubebuilder/testdata/project-v4-with-plugins/api/v1alpha1"
@@ -71,13 +72,13 @@ var _ = Describe("Busybox controller", func() {
 			if err != nil && errors.IsNotFound(err) {
 				// Let's mock our custom resource at the same way that we would
 				// apply on the cluster the manifest under config/samples
-				busybox := &examplecomv1alpha1.Busybox{
+				busybox = &examplecomv1alpha1.Busybox{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:      BusyboxName,
 						Namespace: namespace.Name,
 					},
 					Spec: examplecomv1alpha1.BusyboxSpec{
-						Size: 1,
+						Size: ptr.To(int32(1)),
 					},
 				}
 
diff --git a/testdata/project-v4-with-plugins/internal/controller/memcached_controller.go b/testdata/project-v4-with-plugins/internal/controller/memcached_controller.go
index c55064fe2..8b9f76fb7 100644
--- a/testdata/project-v4-with-plugins/internal/controller/memcached_controller.go
+++ b/testdata/project-v4-with-plugins/internal/controller/memcached_controller.go
@@ -100,6 +100,10 @@ func (r *MemcachedReconciler) Reconcile(ctx context.Context, req ctrl.Request) (
 	}
 
 	// Let's just set the status as Unknown when no status is available
+	if memcached.Status == nil {
+		memcached.Status = &examplecomv1alpha1.MemcachedStatus{}
+	}
+
 	if len(memcached.Status.Conditions) == 0 {
 		meta.SetStatusCondition(&memcached.Status.Conditions, metav1.Condition{Type: typeAvailableMemcached, Status: metav1.ConditionUnknown, Reason: "Reconciling", Message: "Starting reconciliation"})
 		if err = r.Status().Update(ctx, memcached); err != nil {
@@ -233,8 +237,8 @@ func (r *MemcachedReconciler) Reconcile(ctx context.Context, req ctrl.Request) (
 	// Therefore, the following code will ensure the Deployment size is the same as defined
 	// via the Size spec of the Custom Resource which we are reconciling.
 	size := memcached.Spec.Size
-	if *found.Spec.Replicas != size {
-		found.Spec.Replicas = &size
+	if found.Spec.Replicas == nil || found.Spec.Replicas != size {
+		found.Spec.Replicas = size
 		if err = r.Update(ctx, found); err != nil {
 			log.Error(err, "Failed to update Deployment",
 				"Deployment.Namespace", found.Namespace, "Deployment.Name", found.Name)
@@ -318,7 +322,7 @@ func (r *MemcachedReconciler) deploymentForMemcached(
 			Namespace: memcached.Namespace,
 		},
 		Spec: appsv1.DeploymentSpec{
-			Replicas: &replicas,
+			Replicas: replicas,
 			Selector: &metav1.LabelSelector{
 				MatchLabels: ls,
 			},
diff --git a/testdata/project-v4-with-plugins/internal/controller/memcached_controller_test.go b/testdata/project-v4-with-plugins/internal/controller/memcached_controller_test.go
index f9a13a320..a47a78907 100644
--- a/testdata/project-v4-with-plugins/internal/controller/memcached_controller_test.go
+++ b/testdata/project-v4-with-plugins/internal/controller/memcached_controller_test.go
@@ -29,6 +29,7 @@ import (
 	"k8s.io/apimachinery/pkg/api/errors"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/apimachinery/pkg/types"
+	"k8s.io/utils/ptr"
 	"sigs.k8s.io/controller-runtime/pkg/reconcile"
 
 	examplecomv1alpha1 "sigs.k8s.io/kubebuilder/testdata/project-v4-with-plugins/api/v1alpha1"
@@ -71,13 +72,13 @@ var _ = Describe("Memcached controller", func() {
 			if err != nil && errors.IsNotFound(err) {
 				// Let's mock our custom resource at the same way that we would
 				// apply on the cluster the manifest under config/samples
-				memcached := &examplecomv1alpha1.Memcached{
+				memcached = &examplecomv1alpha1.Memcached{
 					ObjectMeta: metav1.ObjectMeta{
 						Name:      MemcachedName,
 						Namespace: namespace.Name,
 					},
 					Spec: examplecomv1alpha1.MemcachedSpec{
-						Size:          1,
+						Size:          ptr.To(int32(1)),
 						ContainerPort: 11211,
 					},
 				}
